#!/usr/bin/env python
import sys
import time
import argparse
import optimus_manager.envs as envs
from optimus_manager.config import load_config, ConfigError
from optimus_manager.var import read_startup_mode, write_startup_mode, read_requested_mode, remove_requested_mode_var, VarError
from optimus_manager.switching import switch_to_intel, switch_to_nvidia, SwitchError
from optimus_manager.cleanup import clean_autogenerated
from optimus_manager.bash import exec_bash, BashError
from optimus_manager.checks import is_xorg_running
import optimus_manager.pci as pci
from optimus_manager.sessions import get_x11_sessions, terminate_session, SessionError
from optimus_manager.xorg import get_xorg_servers_pids

POLL_INTERVAL = 0.5
TIMEOUT = 10.0


def _poll_block(f, poll_interval, timeout):

    t0 = time.time()
    t = t0
    while abs(t - t0) < timeout:
        if not f():
            return True
        else:
            time.sleep(poll_interval)
            t = time.time()

    return False


def _terminate_sessions():

    try:
        x11_sessions = get_x11_sessions()

        if len(x11_sessions) > 0:
            print("There are %d open sessions remaining, terminating them manually" % len(x11_sessions))

        for session in x11_sessions:
            terminate_session(session)

        def f(): return (len(get_x11_sessions()) != 0)

        success = _poll_block(f, POLL_INTERVAL, TIMEOUT)

        if not success:
            print("Cannot terminate loginctl sessions.")
            sys.exit(1)
        else:
            print("No loginctl session left")

    except SessionError as e:
        print("Error terminating loginctl sessions : %s" % str(e))


def _stop_xorg_servers():

    pids_list = get_xorg_servers_pids()

    if len(pids_list) > 0:
        print("There are %d X11 servers remaining, terminating them manually" % len(pids_list))

    for pid in pids_list:
        try:
            exec_bash("kill -9 %d" % pid)
        except BashError:
            pass

    success = _poll_block(is_xorg_running, POLL_INTERVAL, TIMEOUT)

    if not success:
        print("Cannot stop X11 servers.")
        sys.exit(1)
    else:
        print("No X11 server left")


def main():

    # Arguments parsing
    parser = argparse.ArgumentParser(description="Display Manager setup service for the Optimus Manager tool.\n"
                                                 "https://github.com/Askannz/optimus-manager")
    parser.add_argument('--setup-start', action='store_true', help='Setup Optimus before the login manager starts.')
    parser.add_argument('--setup-stop', action='store_true', help='Cleanup Optimus after the login manager stops.')

    args = parser.parse_args()

    print("Optimus Manager (DM setup) version %s" % envs.VERSION)

    # Config
    try:
        config = load_config()
    except ConfigError as e:
        print("Error loading config file : %s" % str(e))
        sys.exit(1)

    if args.setup_start:

        print("Setting up Optimus configuration")

        # Cleanup
        clean_autogenerated()

        try:
            requested_mode = read_requested_mode()
        except VarError as e:

            print("Cannot read requested mode : %s.\nUsing startup mode instead." % str(e))

            try:
                startup_mode = read_startup_mode()
            except VarError as e:
                print("Cannot read startup mode : %s.\nUsing default startup mode %s instead." % (str(e), envs.DEFAULT_STARTUP_MODE))
                startup_mode = envs.DEFAULT_STARTUP_MODE

            print("Startup mode :", startup_mode)
            if startup_mode == "nvidia_once":
                requested_mode = "nvidia"
                write_startup_mode("intel")
            else:
                requested_mode = startup_mode

        # We are done reading the command
        remove_requested_mode_var()

        print("Requested mode :", requested_mode)

        try:
            if requested_mode == "nvidia":
                switch_to_nvidia(config)
            elif requested_mode == "intel":
                switch_to_intel(config)
        except SwitchError as e:
            print("Cannot switch GPUS : %s" % str(e))
            sys.exit(0)

    elif args.setup_stop:

        print("Cleaning up Optimus configuration")
        clean_autogenerated()

        print("Terminating X11 sessions")
        _terminate_sessions()

        print("Killing remaining X11 servers")
        _stop_xorg_servers()

        # There is a known bug causing systemd-logind to keep ownership of the GPU
        # and prevents module unloading
        print("Killing systemd-logind")
        try:
            exec_bash("pkill systemd-logind")
        except BashError:
            pass

        print("Unloading kernel modules")
        try:
            exec_bash("modprobe -r nvidia_drm nvidia_modeset nvidia_uvm nvidia nouveau")
        except BashError as e:
            print("Cannot unload modules : %s" % str(e))
            sys.exit(1)

        # Reset the PCI device corresponding to the Nvidia GPU
        if config["optimus"]["pci_reset"] == "yes":
            if config["optimus"]["switching"] == "bbswitch":
                print("bbswitch is enabled, pci_reset option ignored.")
            else:
                print("Resetting the GPU")
                try:
                    pci.reset_gpu()
                except pci.PCIError as e:
                    print("Error resetting the PCI device : %s" % str(e))

    else:

        print("Invalid argument")


if __name__ == '__main__':
    main()
